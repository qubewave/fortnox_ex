# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.CustomersResource do
  @moduledoc """
  API calls for all endpoints tagged `CustomersResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create a customer
  The created customer will be returned if everything succeeded, if there was any problems an error will be returned.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (CustomerWrap): customer to create

  ### Returns

  - `{:ok, FortnoxEx.Model.CustomerWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_customers_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.CustomerWrap.t} | {:error, Tesla.Env.t}
  def create_customers_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/customers/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.CustomerWrap{}}
    ])
  end

  @doc """
  Retrieve a customer
  You need to supply the unique customer number that was returned when the customer was created or retrieved from the list of customers.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `customer_number` (String.t): identifies the customer
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.CustomerWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_customers_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.CustomerWrap.t} | {:error, Tesla.Env.t}
  def get_customers_resource(connection, customer_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/customers/#{customer_number}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.CustomerWrap{}}
    ])
  end

  @doc """
  Retrieve a list of customers
  The customers are returned sorted by customer number with the lowest number appearing first.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter` (String.t): possibility to filter customers

  ### Returns

  - `{:ok, FortnoxEx.Model.CustomerListItemList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_customers_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.CustomerListItemList.t} | {:error, Tesla.Env.t}
  def list_customers_resource(connection, opts \\ []) do
    optional_params = %{
      :filter => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/customers/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.CustomerListItemList{}}
    ])
  end

  @doc """
  Delete a customer
  Deletes the customer permanently. If everything succeeded the response will be of the type 204 \\u2013 No content and the response body will be empty. If there was any problems an error will be returned.  You need to supply the unique customer number of the customer that you want to delete.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `customer_number` (String.t): identifies the customer
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_customers_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def remove_customers_resource(connection, customer_number, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/customers/#{customer_number}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Update a customer
  <p>The updated customer will be returned if everything succeeded, if there was any problems an error will be returned.</p>  <p>You need to supply the unique customer number of the customer that you want to update.</p>  <p>Only the properties provided in the request body will be updated, properties not provided will left unchanged.</p>

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `customer_number` (String.t): identifies the customer
  - `opts` (keyword): Optional parameters
    - `:body` (CustomerWrap): customer to update

  ### Returns

  - `{:ok, FortnoxEx.Model.CustomerWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_customers_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.CustomerWrap.t} | {:error, Tesla.Env.t}
  def update_customers_resource(connection, customer_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/customers/#{customer_number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.CustomerWrap{}}
    ])
  end
end
