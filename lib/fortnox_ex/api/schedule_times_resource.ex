# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.ScheduleTimesResource do
  @moduledoc """
  API calls for all endpoints tagged `ScheduleTimesResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Retrieve a specific schedule time

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `employee_id` (String.t): identifies the employee
  - `date` (Date.t): identifies the date
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.ScheduleTimeWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_schedule_times_resource(Tesla.Env.client, String.t, Date.t, keyword()) :: {:ok, FortnoxEx.Model.ScheduleTimeWrap.t} | {:error, Tesla.Env.t}
  def get_schedule_times_resource(connection, employee_id, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/scheduletimes/#{employee_id}/#{date}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ScheduleTimeWrap{}}
    ])
  end

  @doc """
  Reset schedule time

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `employee_id` (String.t): identifies the employee
  - `date` (Date.t): identifies the date
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.ScheduleTimeWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reset(Tesla.Env.client, String.t, Date.t, keyword()) :: {:ok, FortnoxEx.Model.ScheduleTimeWrap.t} | {:error, Tesla.Env.t}
  def reset(connection, employee_id, date, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/scheduletimes/#{employee_id}/#{date}/resetday")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ScheduleTimeWrap{}}
    ])
  end

  @doc """
  Update a schedule time

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `employee_id` (String.t): identifies the employee
  - `date` (Date.t): identifies the date
  - `opts` (keyword): Optional parameters
    - `:body` (ScheduleTimeWrap): to update

  ### Returns

  - `{:ok, FortnoxEx.Model.ScheduleTimeWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_schedule_times_resource(Tesla.Env.client, String.t, Date.t, keyword()) :: {:ok, FortnoxEx.Model.ScheduleTimeWrap.t} | {:error, Tesla.Env.t}
  def update_schedule_times_resource(connection, employee_id, date, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/scheduletimes/#{employee_id}/#{date}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ScheduleTimeWrap{}}
    ])
  end
end
