# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.PredefinedAccountsResource do
  @moduledoc """
  API calls for all endpoints tagged `PredefinedAccountsResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Retrieve information for a specific account type

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `name` (String.t): identifies the predefined account
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.PredefinedAccountWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_predefined_accounts_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.PredefinedAccountWrap.t} | {:error, Tesla.Env.t}
  def get_predefined_accounts_resource(connection, name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/predefinedaccounts/#{name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.PredefinedAccountWrap{}}
    ])
  end

  @doc """
  Retrieve a list of all predefined accounts

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.PredefinedAccountList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_predefined_accounts_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.PredefinedAccountList.t} | {:error, Tesla.Env.t}
  def list_predefined_accounts_resource(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/predefinedaccounts/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.PredefinedAccountList{}}
    ])
  end

  @doc """
  Update a Predefined Account
  An endpoint for updating a Predefined Account. Predefined Accounts are identified by their <em>name</em>-field, and as such must be unique.  Some Predefined Accounts distinguish between Goods and Services.  In this case, the former retains the original name whereas the latter ends with a 2. Such as <em>SALES</em> and <em>SALES2</em>.  Accounts are chosen from the Account Registry, and if you have EasyVat enabled then the new EasyVat Predefined Accounts (<em>SALES_25_SE</em>, etc.) have certain restrictions on the accounts that can be selected.  Refer to the table below.   <table>      <caption>Account restrictions when EasyVat has been enabled.</caption>      <tr>          <th>Name</th>          <th>VAT Code</th>          <th>Restrictions</th>      </tr>      <tr>          <td>SALES_25_SE</td>          <td>MP1</td>          <td>Must have a compatible VAT Code.</td>      </tr>      <tr>          <td>SALES_12_SE</td>          <td>MP2</td>          <td>Must have a compatible VAT Code.</td>      </tr>      <tr>          <td>SALES_6_SE</td>          <td>MP3</td>          <td>Must have a compatible VAT Code.</td>      </tr>      <tr>          <td>SALES_0_SE</td>          <td>MF</td>          <td>Must have a compatible VAT Code.</td>      </tr>  </table>   This endpoint can produce errors, some of which may only be relevant for EasyVat. Refer to the table below.  <table>      <caption>Errors that can be raised by this endpoint.</caption>      <tr>          <th>Error Code</th>          <th>HTTP Code</th>          <th>Description</th>          <th>Solution</th>      </tr>      <tr>          <td>2001265</td>          <td>400</td>          <td>The provided account is invalid. It either has not been provided, does not exist, or is inactive.</td>          <td>Verify that an account has been provided and that it exists and is active.</td>      </tr>      <tr>          <td>2002462</td>          <td>400</td>          <td>The account is not in a valid format.</td>          <td>Verify that the format of the account is correct. It has to consist of 4 digits.</td>      </tr>      <tr>          <td>2000729</td>          <td>400</td>          <td>A Predefined Account has not been provided.</td>          <td>Verify that a valid Predefined Account has been provided as a PATH-parameter.</td>      </tr>      <tr>          <td>2004052</td>          <td>400</td>          <td>The provided account has an incompatible VAT Code. Only applies if EasyVat has been enabled.</td>          <td>Verify that the provided account has a VAT Code that is compatible with the selected Predefined Account. Refer to the table above for more information about compatibility.</td>      </tr>  </table>   If you have activated EasyVat, you can read more about how to use the new Predefined Accounts with your documents in their respective api documentation.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `name` (String.t): identifies the predefined account
  - `opts` (keyword): Optional parameters
    - `:body` (PredefinedAccountWrap): predefined account to update

  ### Returns

  - `{:ok, FortnoxEx.Model.PredefinedAccountWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_predefined_accounts_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.PredefinedAccountWrap.t} | {:error, Tesla.Env.t}
  def update_predefined_accounts_resource(connection, name, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/predefinedaccounts/#{name}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.PredefinedAccountWrap{}}
    ])
  end
end
