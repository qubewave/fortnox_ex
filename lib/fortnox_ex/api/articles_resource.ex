# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.ArticlesResource do
  @moduledoc """
  API calls for all endpoints tagged `ArticlesResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create an article
  The created article will be returned if everything succeeded, if there was any problems an error will be returned.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (ArticleWrap): to create

  ### Returns

  - `{:ok, FortnoxEx.Model.ArticleWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_articles_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.ArticleWrap.t} | {:error, Tesla.Env.t}
  def create_articles_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/3/articles")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ArticleWrap{}}
    ])
  end

  @doc """
  Retrieve an article
  Retrieves the details of an article. You need to supply the unique article number that was returned when the article was created or retrieved from the list of articles.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `article_number` (integer()): identifies the article
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.ArticleWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_articles_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, FortnoxEx.Model.ArticleWrap.t} | {:error, Tesla.Env.t}
  def get_articles_resource(connection, article_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/articles/#{article_number}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ArticleWrap{}}
    ])
  end

  @doc """
  Retrieve a list of articles
  Retrieves a list of articles. The articles are returned sorted by article number with the lowest number appearing first.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter` (String.t): possibility to filter supplier invoices

  ### Returns

  - `{:ok, FortnoxEx.Model.ArticleListItemList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_articles_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.ArticleListItemList.t} | {:error, Tesla.Env.t}
  def list_articles_resource(connection, opts \\ []) do
    optional_params = %{
      :filter => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/3/articles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ArticleListItemList{}}
    ])
  end

  @doc """
  Delete an article
  <p>Deletes the article permanently.</p>  <p>You need to supply the unique article number that was returned when the article was created or retrieved from the list of articles.</p>

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `article_number` (integer()): identifies the article
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_articles_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def remove_articles_resource(connection, article_number, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/3/articles/#{article_number}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Update an article
  Updates the specified article with the values provided in the properties. Any property not provided will be left unchanged.  You need to supply the unique article number that was returned when the article was created or retrieved from the list of articles.  Note that even though the article number is writeable you can not change the number of an existing article.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `article_number` (integer()): identifies the article
  - `opts` (keyword): Optional parameters
    - `:body` (ArticleWrap): to update

  ### Returns

  - `{:ok, FortnoxEx.Model.ArticleWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_articles_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, FortnoxEx.Model.ArticleWrap.t} | {:error, Tesla.Env.t}
  def update_articles_resource(connection, article_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/articles/#{article_number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ArticleWrap{}}
    ])
  end
end
