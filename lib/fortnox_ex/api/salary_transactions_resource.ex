# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.SalaryTransactionsResource do
  @moduledoc """
  API calls for all endpoints tagged `SalaryTransactionsResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create a new salary transaction for an employee

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (SalaryTransactionWrap): to create

  ### Returns

  - `{:ok, FortnoxEx.Model.SalaryTransactionWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_salary_transactions_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.SalaryTransactionWrap.t} | {:error, Tesla.Env.t}
  def create_salary_transactions_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/salarytransactions")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.SalaryTransactionWrap{}}
    ])
  end

  @doc """
  Delete a single salary transaction

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `salary_row` (integer()): identifies the salary transaction
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.SalaryTransactionWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_salary_transactions_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, FortnoxEx.Model.SalaryTransactionWrap.t} | {:error, Tesla.Env.t}
  def delete_salary_transactions_resource(connection, salary_row, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/salarytransactions/#{salary_row}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.SalaryTransactionWrap{}}
    ])
  end

  @doc """
  Retrieve a single salary transaction

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `salary_row` (integer()): identifies the salary transaction
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.SalaryTransactionWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_salary_transactions_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, FortnoxEx.Model.SalaryTransactionWrap.t} | {:error, Tesla.Env.t}
  def get_salary_transactions_resource(connection, salary_row, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/salarytransactions/#{salary_row}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.SalaryTransactionWrap{}}
    ])
  end

  @doc """
  List all salary transactions for all employees
  Supports query-string parameters <b>employeeid</b> and <b>date</b> for filtering the result.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:employeeId` (String.t): filter on employeeId
    - `:date` (Date.t): filter on date

  ### Returns

  - `{:ok, FortnoxEx.Model.SalaryTransactionListItemList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_salary_transactions_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.SalaryTransactionListItemList.t} | {:error, Tesla.Env.t}
  def list_salary_transactions_resource(connection, opts \\ []) do
    optional_params = %{
      :employeeId => :query,
      :date => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/salarytransactions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.SalaryTransactionListItemList{}}
    ])
  end

  @doc """
  Update a salary transaction

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `salary_row` (integer()): identifies the salary transaction
  - `opts` (keyword): Optional parameters
    - `:body` (SalaryTransactionWrap): to update

  ### Returns

  - `{:ok, FortnoxEx.Model.SalaryTransactionWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_salary_transactions_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, FortnoxEx.Model.SalaryTransactionWrap.t} | {:error, Tesla.Env.t}
  def update_salary_transactions_resource(connection, salary_row, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/salarytransactions/#{salary_row}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.SalaryTransactionWrap{}}
    ])
  end
end
