# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.ContractsResource do
  @moduledoc """
  API calls for all endpoints tagged `ContractsResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create a contract

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (ContractWrap): contract to create

  ### Returns

  - `{:ok, FortnoxEx.Model.ContractWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_contracts_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.ContractWrap.t} | {:error, Tesla.Env.t}
  def create_contracts_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/contracts/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ContractWrap{}}
    ])
  end

  @doc """
  Create invoice from contract

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the contract
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec createinvoice(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def createinvoice(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/contracts/#{document_number}/createinvoice")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Set a contract as finished

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the contract
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.ContractWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec finish(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.ContractWrap.t} | {:error, Tesla.Env.t}
  def finish(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/contracts/#{document_number}/finish")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ContractWrap{}}
    ])
  end

  @doc """
  Retrieve a single contract

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the contract
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.ContractWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_contracts_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.ContractWrap.t} | {:error, Tesla.Env.t}
  def get_contracts_resource(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/contracts/#{document_number}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ContractWrap{}}
    ])
  end

  @doc """
  Increases the invoice count without creating an invoice

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the contract
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.ContractWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec increaseinvoicecount(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.ContractWrap.t} | {:error, Tesla.Env.t}
  def increaseinvoicecount(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/contracts/#{document_number}/increaseinvoicecount")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ContractWrap{}}
    ])
  end

  @doc """
  Retrieve a list of contracts

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter` (String.t): possibility to filter contracts

  ### Returns

  - `{:ok, FortnoxEx.Model.ContractListItemList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_contracts_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.ContractListItemList.t} | {:error, Tesla.Env.t}
  def list_contracts_resource(connection, opts \\ []) do
    optional_params = %{
      :filter => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/contracts/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ContractListItemList{}}
    ])
  end

  @doc """
  Update a contract
  Note that there are two approaches for updating the rows on a contract.   If RowId is not specified on any row, the rows will be mapped and updated in the order in which they are set in the array. All rows that should remain on the contract needs to be provided.   If RowId is specified on one or more rows the following goes: Corresponding row with that id will be updated. The rows without RowId will be interpreted as new rows. If a row should not be updated but remain on the contract then specify only RowId like { \"RowId\": 123 }, otherwise it will be removed. Note that new RowIds are generated for all rows every time a contract is updated.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the contract
  - `opts` (keyword): Optional parameters
    - `:body` (ContractWrap): contract to update

  ### Returns

  - `{:ok, FortnoxEx.Model.ContractWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_contracts_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.ContractWrap.t} | {:error, Tesla.Env.t}
  def update_contracts_resource(connection, document_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/contracts/#{document_number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ContractWrap{}}
    ])
  end
end
