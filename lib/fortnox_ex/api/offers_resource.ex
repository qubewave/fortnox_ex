# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.OffersResource do
  @moduledoc """
  API calls for all endpoints tagged `OffersResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Cancels given offer

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the offer
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.OfferWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cancel_offers_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.OfferWrap.t} | {:error, Tesla.Env.t}
  def cancel_offers_resource(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/3/offers/#{document_number}/cancel")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.OfferWrap{}}
    ])
  end

  @doc """
  Create an offer
  An endpoint for creating an offer.   Should you have EasyVat enabled, it is mandatory to provide an account in the request should you use a custom VAT rate.   This endpoint can produce errors, some of which may only be relevant for EasyVat. Refer to the table below.  <table>  <caption>Errors that can be raised by this endpoint.</caption>    <tr>     <th>Error Code</th>     <th>HTTP Code</th>     <th>Description</th>     <th>Solution</th>    </tr>    <tr>     <td>2004167</td>     <td>400</td>     <td>An account must be provided when using a custom VAT rate and EasyVat has been enabled.</td>     <td>Supply each row which has a custom VAT rate with an account.</td>    </tr>  </table>

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (OfferWrap): to create

  ### Returns

  - `{:ok, FortnoxEx.Model.OfferWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_offers_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.OfferWrap.t} | {:error, Tesla.Env.t}
  def create_offers_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/3/offers/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.OfferWrap{}}
    ])
  end

  @doc """
  Create order out of given offer

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the offer
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.OrderWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec createorder(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.OrderWrap.t} | {:error, Tesla.Env.t}
  def createorder(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/3/offers/#{document_number}/createorder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.OrderWrap{}}
    ])
  end

  @doc """
  Send given offer as email
  You can use the properties in the EmailInformation to customize the e-mail message on each offer.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the offer
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.OfferWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec email_offers_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.OfferWrap.t} | {:error, Tesla.Env.t}
  def email_offers_resource(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/offers/#{document_number}/email")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.OfferWrap{}}
    ])
  end

  @doc """
  Set given offer as sent
  Use this endpoint to set offer as sent, without generating an offer.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the offer
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.OfferWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec externalprint(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.OfferWrap.t} | {:error, Tesla.Env.t}
  def externalprint(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/3/offers/#{document_number}/externalprint")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.OfferWrap{}}
    ])
  end

  @doc """
  Retrieve a single offer

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the offer
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.OfferWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_offers_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.OfferWrap.t} | {:error, Tesla.Env.t}
  def get_offers_resource(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/offers/#{document_number}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.OfferWrap{}}
    ])
  end

  @doc """
  Retrieve a list of offers

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter` (String.t): possibility to filter offers

  ### Returns

  - `{:ok, FortnoxEx.Model.OfferListItemList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_offers_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.OfferListItemList.t} | {:error, Tesla.Env.t}
  def list_offers_resource(connection, opts \\ []) do
    optional_params = %{
      :filter => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/3/offers/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.OfferListItemList{}}
    ])
  end

  @doc """
  Preview given offer
  The difference between this and the print-endpoint is that property Sent is not set to TRUE.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the offer
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, binary()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec preview_offers_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def preview_offers_resource(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/offers/#{document_number}/preview")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Print given offer

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the offer
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, binary()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec print_offers_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def print_offers_resource(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/offers/#{document_number}/print")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Update an offer
  Note that there are two approaches for updating the rows on an offer.   If RowId is not specified on any row, the rows will be mapped and updated in the order in which they are set in the array. All rows that should remain on the offer needs to be provided.   If RowId is specified on one or more rows the following goes: Corresponding row with that id will be updated. The rows without RowId will be interpreted as new rows. If a row should not be updated but remain on the offer then specify only RowId like { \"RowId\": 123 }, otherwise it will be removed. Note that new RowIds are generated for all rows every time an offer is updated.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the offer
  - `opts` (keyword): Optional parameters
    - `:body` (OfferWrap): to update

  ### Returns

  - `{:ok, FortnoxEx.Model.OfferWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_offers_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.OfferWrap.t} | {:error, Tesla.Env.t}
  def update_offers_resource(connection, document_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/offers/#{document_number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.OfferWrap{}}
    ])
  end
end
