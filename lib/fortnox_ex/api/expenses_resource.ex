# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.ExpensesResource do
  @moduledoc """
  API calls for all endpoints tagged `ExpensesResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create an expense

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (ExpenseWrap): expense to create

  ### Returns

  - `{:ok, FortnoxEx.Model.ExpenseWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_expenses_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.ExpenseWrap.t} | {:error, Tesla.Env.t}
  def create_expenses_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/3/expenses/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ExpenseWrap{}}
    ])
  end

  @doc """
  Retrieve an expense
  Retrieves expense information for specified expense.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `expense_code` (String.t): expenseCode
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.ExpenseWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_expenses_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.ExpenseWrap.t} | {:error, Tesla.Env.t}
  def get_expenses_resource(connection, expense_code, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/expenses/#{expense_code}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ExpenseWrap{}}
    ])
  end

  @doc """
  Retrieve expenses
  Retrieve expense codes.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.ExpenseListItemWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_expenses_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.ExpenseListItemWrap.t} | {:error, Tesla.Env.t}
  def list_expenses_resource(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/expenses/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ExpenseListItemWrap{}}
    ])
  end
end
