# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.AttendanceTransactionsResource do
  @moduledoc """
  API calls for all endpoints tagged `AttendanceTransactionsResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create a new attendance transaction

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (AttendanceTransactionWrap): attendance transaction to create

  ### Returns

  - `{:ok, FortnoxEx.Model.AttendanceTransactionWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_attendance_transactions_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.AttendanceTransactionWrap.t} | {:error, Tesla.Env.t}
  def create_attendance_transactions_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/3/attendancetransactions")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AttendanceTransactionWrap{}}
    ])
  end

  @doc """
  Retrieve a specific attendance transaction
  Retrieves a specific transaction

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): identifies the transaction
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.AttendanceTransactionWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_attendance_transactions_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AttendanceTransactionWrap.t} | {:error, Tesla.Env.t}
  def get_attendance_transactions_resource(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/attendancetransactions/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AttendanceTransactionWrap{}}
    ])
  end

  @doc """
  Lists all attendance transactions
  Supports query-string parameters <strong>employeeid</strong> and <strong>date</strong> for filtering the result.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:employeeid` (String.t): filter by employee id
    - `:date` (String.t): filter by date

  ### Returns

  - `{:ok, FortnoxEx.Model.AttendanceTransactionListItemList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_attendance_transactions_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.AttendanceTransactionListItemList.t} | {:error, Tesla.Env.t}
  def list_attendance_transactions_resource(connection, opts \\ []) do
    optional_params = %{
      :employeeid => :query,
      :date => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/3/attendancetransactions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AttendanceTransactionListItemList{}}
    ])
  end

  @doc """
  Update a single attendance transaction

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): identifies the transaction
  - `opts` (keyword): Optional parameters
    - `:body` (AttendanceTransactionWrap): to update

  ### Returns

  - `{:ok, FortnoxEx.Model.AttendanceTransactionWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_attendance_transactions_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AttendanceTransactionWrap.t} | {:error, Tesla.Env.t}
  def update_attendance_transactions_resource(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/attendancetransactions/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AttendanceTransactionWrap{}}
    ])
  end
end
