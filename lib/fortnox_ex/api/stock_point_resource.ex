# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.StockPointResource do
  @moduledoc """
  API calls for all endpoints tagged `StockPointResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Append stock locations
  Add new stock locations to specific <code>StockPoint</code>.   If you include an already existing stock location code, it will be ignored.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): stock point id
  - `opts` (keyword): Optional parameters
    - `:body` ([FortnoxEx.Model.StockLocation.t]): A list of <code>StockLocations</code> to append.

  ### Returns

  - `{:ok, [%StockLocation{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec append_stock_locations(Tesla.Env.client, String.t, keyword()) :: {:ok, list(FortnoxEx.Model.StockLocation.t)} | {:error, Tesla.Env.t}
  def append_stock_locations(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/warehouse/stockpoints-v1/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.StockLocation{}]}
    ])
  end

  @doc """
  Create stock point
  Both <code>code</code> and <code>name</code> are mandatory.   If you want to set a custom delivery address for this stock point,  you must remember to set <code>usingCompanyAddress</code> to <code>false</code>.   Returns 400 <code>alreadyexists</code> if a stock point with same code already exists.   Returns 400 <code>duplicatestocklocations</code> if two or more stock locations have the same code.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (StockPoint): stock point

  ### Returns

  - `{:ok, FortnoxEx.Model.StockPoint.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.StockPoint.t} | {:error, Tesla.Env.t}
  def create(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/warehouse/stockpoints-v1")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.StockPoint{}}
    ])
  end

  @doc """
  Delete stock point
  Note that it is not allowed to delete a stock point that is in use.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.StockPoint.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.StockPoint.t} | {:error, Tesla.Env.t}
  def delete(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/api/warehouse/stockpoints-v1/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.StockPoint{}}
    ])
  end

  @doc """
  List stock points
  List stock points, optionally include a query parameter `q` to filter on stock point code or name.   Use query param `state` to filter on ACTIVE, INACTIVE or ALL (default is to include only ACTIVE stock points).   Stock locations are NOT included in the response.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:q` (String.t): filters on stock point code or name.
    - `:state` (String.t): filter on stock point state

  ### Returns

  - `{:ok, [%StockPoint{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_all(Tesla.Env.client, keyword()) :: {:ok, list(FortnoxEx.Model.StockPoint.t)} | {:error, Tesla.Env.t}
  def get_all(connection, opts \\ []) do
    optional_params = %{
      :q => :query,
      :state => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/stockpoints-v1")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.StockPoint{}]}
    ])
  end

  @doc """
  Get stock point
  Get stock point by id or code.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): stock point code, or stock point id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.StockPoint.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_by_ambiguous_id(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.StockPoint.t} | {:error, Tesla.Env.t}
  def get_by_ambiguous_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/stockpoints-v1/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.StockPoint{}}
    ])
  end

  @doc """
  Get stock points
  Get stock points by IDs.   Use query param `state` to filter on ACTIVE, INACTIVE or ALL (default is to include ALL stock points).   Stock locations are NOT included in the response.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:ids` ([String.t]): stock point ids (comma separated list of UUIDs)
    - `:state` (String.t): filter on <code>StockPointState</code>, default is to include ALL stock points.

  ### Returns

  - `{:ok, [%StockPoint{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_many(Tesla.Env.client, keyword()) :: {:ok, list(FortnoxEx.Model.StockPoint.t)} | {:error, Tesla.Env.t}
  def get_many(connection, opts \\ []) do
    optional_params = %{
      :ids => :query,
      :state => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/stockpoints-v1/multi")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.StockPoint{}]}
    ])
  end

  @doc """
  Get stock locations
  List stock locations for a specific stock point.   Optionally include a query parameter `q` to filter on stock location code or name.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): stock point id or code
  - `opts` (keyword): Optional parameters
    - `:q` (String.t): filters on stock location code or name.

  ### Returns

  - `{:ok, [%StockLocation{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_stock_locations_by_ambiguous_id(Tesla.Env.client, String.t, keyword()) :: {:ok, list(FortnoxEx.Model.StockLocation.t)} | {:error, Tesla.Env.t}
  def get_stock_locations_by_ambiguous_id(connection, id, opts \\ []) do
    optional_params = %{
      :q => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/stockpoints-v1/#{id}/stocklocations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.StockLocation{}]}
    ])
  end

  @doc """
  Update stock point
  Remember to supply the complete representation of stock point including stock locations.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): id
  - `opts` (keyword): Optional parameters
    - `:body` (StockPoint): complete representation of stock point including stock locations.

  ### Returns

  - `{:ok, FortnoxEx.Model.StockPoint.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.StockPoint.t} | {:error, Tesla.Env.t}
  def update(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/stockpoints-v1/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.StockPoint{}}
    ])
  end
end
