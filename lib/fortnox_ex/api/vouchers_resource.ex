# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.VouchersResource do
  @moduledoc """
  API calls for all endpoints tagged `VouchersResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create a voucher
  The created voucher will be returned if everything succeeded, if there was any problems an error will be returned.  If no query param is used the voucher will be created in the preselected financial year. Go to the financialyears endpoint to read on how to retreive the Financial year id.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:financialyear` (integer()): Financial year id, used to determine which financial year the voucher is created in
    - `:body` (VoucherWrap): voucher to create

  ### Returns

  - `{:ok, FortnoxEx.Model.VoucherWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_vouchers_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.VoucherWrap.t} | {:error, Tesla.Env.t}
  def create_vouchers_resource(connection, opts \\ []) do
    optional_params = %{
      :financialyear => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/vouchers/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.VoucherWrap{}}
    ])
  end

  @doc """
  Retrieve a specific voucher

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `voucher_series` (String.t): identifies the voucher series
  - `voucher_number` (integer()): identifies the voucher number
  - `opts` (keyword): Optional parameters
    - `:financialyear` (integer()): filter on financial year

  ### Returns

  - `{:ok, FortnoxEx.Model.VoucherWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_vouchers_resource(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, FortnoxEx.Model.VoucherWrap.t} | {:error, Tesla.Env.t}
  def get_vouchers_resource(connection, voucher_series, voucher_number, opts \\ []) do
    optional_params = %{
      :financialyear => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/vouchers/#{voucher_series}/#{voucher_number}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.VoucherWrap{}}
    ])
  end

  @doc """
  Retrieve a list of vouchers for a specific series

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `voucher_series` (String.t): identifies the voucher series
  - `opts` (keyword): Optional parameters
    - `:financialyear` (integer()): filter on financial year

  ### Returns

  - `{:ok, FortnoxEx.Model.VoucherListItemList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_series(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.VoucherListItemList.t} | {:error, Tesla.Env.t}
  def list_series(connection, voucher_series, opts \\ []) do
    optional_params = %{
      :financialyear => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/vouchers/sublist/#{voucher_series}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.VoucherListItemList{}}
    ])
  end

  @doc """
  Retrieve all vouchers
  Note that vouchers have two keys, one for voucher series and one for voucher number. The financial year is also specified for each voucher, this is due to the same voucher series and number is used each year.  To get a unique voucher you need the voucher series, the voucher number and the financial year. These properties will always be returned where ever vouchers is used.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:financialyear` (integer()): filter on financial year

  ### Returns

  - `{:ok, FortnoxEx.Model.VoucherListItemList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_vouchers_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.VoucherListItemList.t} | {:error, Tesla.Env.t}
  def list_vouchers_resource(connection, opts \\ []) do
    optional_params = %{
      :financialyear => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/vouchers/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.VoucherListItemList{}}
    ])
  end
end
