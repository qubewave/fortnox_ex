# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.CustomDocumentTypeResource do
  @moduledoc """
  API calls for all endpoints tagged `CustomDocumentTypeResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create custom document type
  Create type, if it doesn't already exists. Note that new custom document types are  created automatically when you create custom documents, so normally  you do not need to call this method.   Throws HTTP 400 <code>referenceTypeNotAllowed</code> if the name of the type is not allowed.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (CustomDocumentType): The <code>CustomDocumentType</code>.

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_custom_document_type_resource(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:error, Tesla.Env.t}
  def create_custom_document_type_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/warehouse/documentdeliveries/custom/documenttypes-v1")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  List custom document types

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CustomDocumentType{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_all_custom_document_type_resource(Tesla.Env.client, keyword()) :: {:ok, list(FortnoxEx.Model.CustomDocumentType.t)} | {:error, Tesla.Env.t}
  def get_all_custom_document_type_resource(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/documentdeliveries/custom/documenttypes-v1")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.CustomDocumentType{}]}
    ])
  end

  @doc """
  Get custom document type

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `type` (String.t): the name of the reference type
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.CustomDocumentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_custom_document_type_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.CustomDocumentType.t} | {:error, Tesla.Env.t}
  def get_custom_document_type_resource(connection, type, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/documentdeliveries/custom/documenttypes-v1/#{type}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.CustomDocumentType{}}
    ])
  end
end
