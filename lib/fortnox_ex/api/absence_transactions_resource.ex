# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.AbsenceTransactionsResource do
  @moduledoc """
  API calls for all endpoints tagged `AbsenceTransactionsResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create a new absence transaction

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (AbsenceTransactionPayloadWrap): to create

  ### Returns

  - `{:ok, FortnoxEx.Model.AbsenceTransactionSingleItemWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_absence_transactions_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.AbsenceTransactionSingleItemWrap.t} | {:error, Tesla.Env.t}
  def create_absence_transactions_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/3/absencetransactions")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AbsenceTransactionSingleItemWrap{}}
    ])
  end

  @doc """
  Retrieve a specific absence transaction
  Retrieves a specific transaction

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): identifies the transaction
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.AbsenceTransactionSingleItemWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_absence_transactions_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AbsenceTransactionSingleItemWrap.t} | {:error, Tesla.Env.t}
  def get_absence_transactions_resource(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/absencetransactions/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AbsenceTransactionSingleItemWrap{}}
    ])
  end

  @doc """
  Retrieve absence transactions
  Retrieves a list of absence transactions for an employee on a specific date and cause code.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `employee_id` (String.t): identifies the employee
  - `date` (Date.t): of the absence transaction
  - `code` (String.t): status code of the absence transaction
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.AbsenceTransactionListItemWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_absence_transactions_resource1(Tesla.Env.client, String.t, Date.t, String.t, keyword()) :: {:ok, FortnoxEx.Model.AbsenceTransactionListItemWrap.t} | {:error, Tesla.Env.t}
  def get_absence_transactions_resource1(connection, employee_id, date, code, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/absencetransactions/#{employee_id}/#{date}/#{code}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AbsenceTransactionListItemWrap{}}
    ])
  end

  @doc """
  Lists all absence transactions
  Supports query-string parameters <strong>employeeid</strong> and <strong>date</strong> for filtering the result.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:employeeid` (String.t): filter by employee id
    - `:date` (String.t): filter by date

  ### Returns

  - `{:ok, FortnoxEx.Model.AbsenceTransactionListItemWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.AbsenceTransactionListItemWrap.t} | {:error, Tesla.Env.t}
  def list(connection, opts \\ []) do
    optional_params = %{
      :employeeid => :query,
      :date => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/3/absencetransactions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AbsenceTransactionListItemWrap{}}
    ])
  end

  @doc """
  Delete an absence transaction

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): identifies the transaction
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.AbsenceTransactionSingleItemWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AbsenceTransactionSingleItemWrap.t} | {:error, Tesla.Env.t}
  def remove(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/3/absencetransactions/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AbsenceTransactionSingleItemWrap{}}
    ])
  end

  @doc """
  Update a single absence transaction

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): identifies the transaction
  - `opts` (keyword): Optional parameters
    - `:body` (AbsenceTransactionPayloadWrap): to update

  ### Returns

  - `{:ok, FortnoxEx.Model.AbsenceTransactionSingleItemWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_absence_transactions_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AbsenceTransactionSingleItemWrap.t} | {:error, Tesla.Env.t}
  def update_absence_transactions_resource(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/absencetransactions/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AbsenceTransactionSingleItemWrap{}}
    ])
  end
end
