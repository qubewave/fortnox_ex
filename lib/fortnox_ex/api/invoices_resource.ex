# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.InvoicesResource do
  @moduledoc """
  API calls for all endpoints tagged `InvoicesResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Bookkeep an invoice

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec bookkeep_invoices_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def bookkeep_invoices_resource(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/invoices/#{document_number}/bookkeep")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Cancel an invoice

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cancel(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def cancel(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/invoices/#{document_number}/cancel")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Create an invoice
  An endpoint for creating an invoice. While it is possible to create an invoice without rows, we encourage you to add them if you can.  Omitted values in the payload will be supplied by Predefined values which can be edited in the Fortnox account settings.  Note that Predefined values will always be overwritten by values provided through the API.   Should you have EasyVat enabled, it is mandatory to provide an account in the request should you use a custom VAT rate.   This endpoint can produce errors, some of which may only be relevant for EasyVat. Refer to the table below.  <table>  <caption>Errors that can be raised by this endpoint.</caption>    <tr>     <th>Error Code</th>     <th>HTTP Code</th>     <th>Description</th>     <th>Solution</th>    </tr>    <tr>     <td>2004167</td>     <td>400</td>     <td>An account must be provided when using a custom VAT rate and EasyVat has been enabled.</td>     <td>Supply each row which has a custom VAT rate with an account.</td>    </tr>  </table>   Note: The <b>EuQuarterlyReport</b> property will become obsolete at 2021-12-01.  This property is currently used by the <b>Quarterly</b> report as one of the conditions that determine if an invoice  should be included in the report or not.  A new version of the <b>Quarterly</b> report is released at 2021-12-01. In the new report, this property will not be  used when determining if an invoice should be included in the report or not, with one exception: if the invoice  is created before 2021-12-01, and this property is false, the invoice will be excluded from the report.  For invoices created 2021-12-01 and later, this property will have no effect.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (InvoicePayloadWrap): payload

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_invoices_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def create_invoices_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/invoices")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Credit an invoice
  The created credit invoice will be referenced in the property CreditInvoiceReference.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec credit(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def credit(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/invoices/#{document_number}/credit")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Send an invoice as e-invoice

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec e_invoice(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def e_invoice(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/invoices/#{document_number}/einvoice")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Send an invoice as e-print

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec e_print(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def e_print(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/invoices/#{document_number}/eprint")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Send an invoice as email
  You can use the properties in the EmailInformation to customize the e-mail message on each invoice.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec email(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def email(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/invoices/#{document_number}/email")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Set an invoice as sent
  Use this endpoint to set invoice as sent, without generating an invoice.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_print(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def external_print(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/invoices/#{document_number}/externalprint")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Retrieve a single invoice

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_invoices_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def get_invoices_resource(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/invoices/#{document_number}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Retrieve a list of invoices

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter` (String.t): possibility to filter invoices
    - `:costcenter` (String.t):
    - `:customername` (String.t):
    - `:customernumber` (String.t):
    - `:label` (String.t):
    - `:documentnumber` (String.t):
    - `:fromdate` (String.t):
    - `:todate` (String.t):
    - `:fromfinalpaydate` (String.t):
    - `:tofinalpaydate` (String.t):
    - `:lastmodified` (String.t):
    - `:notcompleted` (String.t):
    - `:ocr` (String.t):
    - `:ourreference` (String.t):
    - `:project` (String.t):
    - `:sent` (String.t):
    - `:externalinvoicereference1` (String.t):
    - `:externalinvoicereference2` (String.t):
    - `:yourreference` (String.t):
    - `:invoicetype` (String.t):
    - `:articlenumber` (String.t):
    - `:articledescription` (String.t):
    - `:currency` (String.t):
    - `:accountnumberfrom` (String.t):
    - `:accountnumberto` (String.t):
    - `:yourordernumber` (String.t):
    - `:credit` (String.t):
    - `:sortby` (String.t): field to sort returned list on

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceListItemWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_invoices_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.InvoiceListItemWrap.t} | {:error, Tesla.Env.t}
  def list_invoices_resource(connection, opts \\ []) do
    optional_params = %{
      :filter => :query,
      :costcenter => :query,
      :customername => :query,
      :customernumber => :query,
      :label => :query,
      :documentnumber => :query,
      :fromdate => :query,
      :todate => :query,
      :fromfinalpaydate => :query,
      :tofinalpaydate => :query,
      :lastmodified => :query,
      :notcompleted => :query,
      :ocr => :query,
      :ourreference => :query,
      :project => :query,
      :sent => :query,
      :externalinvoicereference1 => :query,
      :externalinvoicereference2 => :query,
      :yourreference => :query,
      :invoicetype => :query,
      :articlenumber => :query,
      :articledescription => :query,
      :currency => :query,
      :accountnumberfrom => :query,
      :accountnumberto => :query,
      :yourordernumber => :query,
      :credit => :query,
      :sortby => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/invoices")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceListItemWrap{}}
    ])
  end

  @doc """
  Preview an invoice
  The difference between this and the print-endpoint is that property Sent is not set to TRUE.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, binary()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec preview(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def preview(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/invoices/#{document_number}/preview")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Print an invoice

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, binary()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec print(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def print(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/invoices/#{document_number}/print")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Print an invoice as reminder

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, binary()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec print_reminder(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def print_reminder(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/invoices/#{document_number}/printreminder")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Update an invoice
  Note that there are two approaches for updating the rows on an invoice.   If RowId is not specified on any row, the rows will be mapped and updated in the order in which they are set in the array. All rows that should remain on the invoice needs to be provided.   If RowId is specified on one or more rows the following goes: Corresponding row with that id will be updated. The rows without RowId will be interpreted as new rows. If a row should not be updated but remain on the invoice then specify only RowId like { \"RowId\": 123 }, otherwise it will be removed. Note that new RowIds are generated for all rows every time an invoice is updated.   Note: The <b>EuQuarterlyReport</b> property will become obsolete at 2021-12-01.  This property is currently used by the <b>Quarterly</b> report as one of the conditions that determine if an invoice  should be included in the report or not.  A new version of the <b>Quarterly</b> report is released at 2021-12-01. In the new report, this property will not be  used when determining if an invoice should be included in the report or not, with one exception: if the invoice  is created before 2021-12-01, and this property is false, the invoice will be excluded from the report.  For invoices created 2021-12-01 and later, this property will have no effect.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters
    - `:body` (InvoicePayloadWrap): payload

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_invoices_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def update_invoices_resource(connection, document_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/invoices/#{document_number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end

  @doc """
  Set an invoice as done
  Used for marking a document as ready in the warehouse module. DeliveryState needs to be set to &quot;delivery&quot;.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `document_number` (String.t): identifies the invoice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoiceWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec warehouse_ready(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoiceWrap.t} | {:error, Tesla.Env.t}
  def warehouse_ready(connection, document_number, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/invoices/#{document_number}/warehouseready")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoiceWrap{}}
    ])
  end
end
