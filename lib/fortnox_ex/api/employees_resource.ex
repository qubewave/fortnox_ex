# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.EmployeesResource do
  @moduledoc """
  API calls for all endpoints tagged `EmployeesResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create a new employee
  EmployeeId is optional. If not supplied the program will generate a unique id.   Only one of DatedSchedules and ScheduleId may be supplied. If DatedSchedules are supplied  it must have one and only one record where FirstDay = '1970-01-01'.  All FirstDay values must greater or equal to '1970-01-01' and unique.   If DatedWages is supplied neither MonthlySalary nor HourlyPay may be supplied. If  MonthlySalary or HourlyPay are supplied, DatedWages may not be supplied.  If DatedWages are supplied it must have one and only one record where FirstDay = '1970-01-01'.  All FirstDay values must greater or equal to '1970-01-01' and unique.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (EmployeeWrap): employee to create

  ### Returns

  - `{:ok, FortnoxEx.Model.EmployeeWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_employees_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.EmployeeWrap.t} | {:error, Tesla.Env.t}
  def create_employees_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/employees/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.EmployeeWrap{}}
    ])
  end

  @doc """
  Retrieve a specific employee
  ScheduleId, MonthlySalary and HourlyPay reflect current values, all  ScheduleIds are returned in DatedSchedules and all MonthlySalary and  HourlyPay pairs are returned in DatedWages.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `employee_id` (String.t): identifies the employee
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.EmployeeWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_employees_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.EmployeeWrap.t} | {:error, Tesla.Env.t}
  def get_employees_resource(connection, employee_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/employees/#{employee_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.EmployeeWrap{}}
    ])
  end

  @doc """
  Retrieve a list of employees
  ScheduleId, MonthlySalary and HourlyPay reflect current values, all  ScheduleIds are returned in DatedSchedules and all MonthlySalary and  HourlyPay pairs are returned in DatedWages.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.EmployeeListItemWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_employees_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.EmployeeListItemWrap.t} | {:error, Tesla.Env.t}
  def list_employees_resource(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/employees/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.EmployeeListItemWrap{}}
    ])
  end

  @doc """
  Update employee
  Only one of DatedSchedules and ScheduleId may be supplied. If DatedSchedules are supplied  it must have one and only one record where FirstDay = '1970-01-01'.  All FirstDay values must greater or equal to '1970-01-01' and unique.   If DatedWages is supplied neither MonthlySalary nor HourlyPay may be supplied. If  MonthlySalary or HourlyPay are supplied, DatedWages may not be supplied.  If DatedWages are supplied it must have one and only one record where FirstDay = '1970-01-01'.  All FirstDay values must greater or equal to '1970-01-01' and unique.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `employee_id` (String.t): identifies the employee
  - `opts` (keyword): Optional parameters
    - `:body` (EmployeeWrap): employee to update

  ### Returns

  - `{:ok, FortnoxEx.Model.EmployeeWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_employees_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.EmployeeWrap.t} | {:error, Tesla.Env.t}
  def update_employees_resource(connection, employee_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/employees/#{employee_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.EmployeeWrap{}}
    ])
  end
end
