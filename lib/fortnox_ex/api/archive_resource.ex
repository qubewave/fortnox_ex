# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.ArchiveResource do
  @moduledoc """
  API calls for all endpoints tagged `ArchiveResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Retrieve a single file
  Providing fileId will return given file from fileattachments.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): identifies the file
  - `opts` (keyword): Optional parameters
    - `:fileid` (String.t): fileId from fileattachments

  ### Returns

  - `{:ok, binary()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_file_by_id(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_file_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :fileid => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/3/archive/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieve folder or file
  If no path is provided the root will be returned.  Providing fileId will return given file from fileattachments.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:path` (String.t): name of folder
    - `:fileid` (String.t): fileId from fileattachments

  ### Returns

  - `{:ok, FortnoxEx.Model.FolderWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_folder(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.FolderWrap.t} | {:error, Tesla.Env.t}
  def get_folder(connection, opts \\ []) do
    optional_params = %{
      :path => :query,
      :fileid => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/3/archive/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.FolderWrap{}}
    ])
  end

  @doc """
  Delete a single file

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): identifies file/folder to remove
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_by_id(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def remove_by_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/3/archive/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Remove files
  Please note that removing a folder will also resulting in removal of all the contents within!

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:path` (String.t): identifies file/folder to remove

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_by_path(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def remove_by_path(connection, opts \\ []) do
    optional_params = %{
      :path => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/3/archive/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Upload a file to a specific subdirectory
  If not path or folderId is provided, the file will be uploaded to the root directory.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:path` (String.t): name of folder
    - `:folderid` (String.t): id of folder
    - `:file` (map()): file to uplad

  ### Returns

  - `{:ok, FortnoxEx.Model.FolderFileRowWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec upload_file(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.FolderFileRowWrap.t} | {:error, Tesla.Env.t}
  def upload_file(connection, opts \\ []) do
    optional_params = %{
      :path => :query,
      :folderid => :query,
      :file => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/3/archive/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.FolderFileRowWrap{}}
    ])
  end
end
