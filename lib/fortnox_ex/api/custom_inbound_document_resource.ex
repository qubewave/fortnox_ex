# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.CustomInboundDocumentResource do
  @moduledoc """
  API calls for all endpoints tagged `CustomInboundDocumentResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Get custom inbound document

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `type` (String.t): Document type.
  - `id` (String.t): Document id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.CustomInboundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_custom_inbound_document_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, FortnoxEx.Model.CustomInboundDocument.t} | {:error, Tesla.Env.t}
  def get_custom_inbound_document_resource(connection, type, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/documentdeliveries/custom/inbound-v1/#{type}/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.CustomInboundDocument{}}
    ])
  end

  @doc """
  Release custom inbound document
  The document will be locked and bookkept.  The inbound deliveries will affect available stock.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `type` (String.t): document type
  - `id` (String.t): document id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec release_custom_inbound_document_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def release_custom_inbound_document_resource(connection, type, id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/documentdeliveries/custom/inbound-v1/#{type}/#{id}/release")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Save custom inbound document

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `type` (String.t): min 1 character, max 25 characters, may contain letters A-Z, digits 0-9, underscore (_), and dash (-), type is case-insensitive  <blockquote><pre>       Type is a custom name/reference of the document that will be used to reference the document type <br>       * If type is not known, it will be registered as belonging to the INBOUND category. <br>       * If type is an existing custom document type of category OUTBOUND an error is thrown. <br>       * If type is invalid an error is thrown. <br>  </pre></blockquote>
  - `id` (String.t): min 1 character, max 25 characters, may only contain digits 0-9
  - `opts` (keyword): Optional parameters
    - `:body` (CustomInboundDocument): the <code>CustomInboundDocument</code> to create

  ### Returns

  - `{:ok, FortnoxEx.Model.CustomInboundDocument.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec save_custom_inbound_document_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, FortnoxEx.Model.CustomInboundDocument.t} | {:error, Tesla.Env.t}
  def save_custom_inbound_document_resource(connection, type, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/documentdeliveries/custom/inbound-v1/#{type}/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.CustomInboundDocument{}}
    ])
  end

  @doc """
  Void custom inbound document
  Voiding a document will undo the possible stock changes that the document had made,  note that the document and the transactions created are not deleted. Some limitations apply, see below.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `type` (String.t): document type
  - `id` (String.t): document id
  - `opts` (keyword): Optional parameters
    - `:force` (boolean()): true if the document should be voided even if the document has connected outbounds, defaults to false.

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec void_document_custom_inbound_document_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def void_document_custom_inbound_document_resource(connection, type, id, opts \\ []) do
    optional_params = %{
      :force => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/documentdeliveries/custom/inbound-v1/#{type}/#{id}/void")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end
end
