# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.AssetsResource do
  @moduledoc """
  API calls for all endpoints tagged `AssetsResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Change manual OB value of an Asset
  The updated asset will be returned if everything succeeded, if there was any problems an error will be returned.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `given_number` (String.t): Asset number
  - `opts` (keyword): Optional parameters
    - `:body` (ManualObAsset): asset

  ### Returns

  - `{:ok, FortnoxEx.Model.AssetSingle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec change_manual_ob_value(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AssetSingle.t} | {:error, Tesla.Env.t}
  def change_manual_ob_value(connection, given_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/assets/#{given_number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AssetSingle{}}
    ])
  end

  @doc """
  Create an Asset
  The created asset will be returned if everything succeeded, if there was any problems an error will be returned.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (CreateAssetWrap): asset

  ### Returns

  - `{:ok, FortnoxEx.Model.AssetSingle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_assets_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.AssetSingle.t} | {:error, Tesla.Env.t}
  def create_assets_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/3/assets/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AssetSingle{}}
    ])
  end

  @doc """
  Delete or Void an Asset
  By specifying a {GivenNumber} in the URL a single &quot;Not active&quot; asset or asset with a type &quot;Not depreciable&quot; can be deleted. By specifying a {GivenNumber} in the URL a single &quot;Active&quot; or &quot;Fully depreciated&quot; assets can be voided and in this case in request body voiddate should be provided, otherwise it will use todays date.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `given_number` (String.t): Asset number
  - `opts` (keyword): Optional parameters
    - `:body` (DeleteWrap): request

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_assets_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_assets_resource(connection, given_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:delete)
      |> url("/3/assets/#{given_number}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Perform a Depreciation of an Asset
  The created vouchers list will be returned if everything succeeded, if there was any problems an error will be returned.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (DepreciationWrap): body

  ### Returns

  - `{:ok, FortnoxEx.Model.DepreciationResponseWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec depreciate(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.DepreciationResponseWrap.t} | {:error, Tesla.Env.t}
  def depreciate(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/3/assets/depreciate")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.DepreciationResponseWrap{}}
    ])
  end

  @doc """
  Retrieve a single asset

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `given_number` (String.t): Asset number
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.AssetSingle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_assets_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AssetSingle.t} | {:error, Tesla.Env.t}
  def get_assets_resource(connection, given_number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/assets/#{given_number}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AssetSingle{}}
    ])
  end

  @doc """
  Assets depreciation list
  Retrieves a list of assets to depreciate.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `to_date` (String.t): toDate
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.ListAssetWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_deprecation_list(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.ListAssetWrap.t} | {:error, Tesla.Env.t}
  def get_deprecation_list(connection, to_date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/assets/depreciations/#{to_date}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ListAssetWrap{}}
    ])
  end

  @doc """
  Retrieve a list of assets

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.ListAssetWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_assets_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.ListAssetWrap.t} | {:error, Tesla.Env.t}
  def list_assets_resource(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/assets/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.ListAssetWrap{}}
    ])
  end

  @doc """
  Scrap an Asset
  The updated asset will be returned if everything succeeded, if there was any problems an error will be returned.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `given_number` (String.t): Asset number
  - `opts` (keyword): Optional parameters
    - `:body` (ScrapWrap): asset

  ### Returns

  - `{:ok, FortnoxEx.Model.AssetSingle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec scrap(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AssetSingle.t} | {:error, Tesla.Env.t}
  def scrap(connection, given_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/assets/scrap/#{given_number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AssetSingle{}}
    ])
  end

  @doc """
  Sell an Asset
  Partial sell or full sell of an asset.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `given_number` (String.t): Asset number
  - `opts` (keyword): Optional parameters
    - `:body` (SellWrap): asset

  ### Returns

  - `{:ok, FortnoxEx.Model.AssetSingle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sell(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AssetSingle.t} | {:error, Tesla.Env.t}
  def sell(connection, given_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/assets/sell/#{given_number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AssetSingle{}}
    ])
  end

  @doc """
  Write down an Asset
  The updated asset will be returned if everything succeeded, if there was any problems an error will be returned.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `given_number` (String.t): Asset number
  - `opts` (keyword): Optional parameters
    - `:body` (WriteDownWrap): asset

  ### Returns

  - `{:ok, FortnoxEx.Model.AssetSingle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec write_down(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AssetSingle.t} | {:error, Tesla.Env.t}
  def write_down(connection, given_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/assets/writedown/#{given_number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AssetSingle{}}
    ])
  end

  @doc """
  Write up an Asset
  The updated asset will be returned if everything succeeded, if there was any problems an error will be returned.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `given_number` (String.t): Asset number
  - `opts` (keyword): Optional parameters
    - `:body` (WriteUpWrap): asset

  ### Returns

  - `{:ok, FortnoxEx.Model.AssetSingle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec write_up(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.AssetSingle.t} | {:error, Tesla.Env.t}
  def write_up(connection, given_number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/assets/writeup/#{given_number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.AssetSingle{}}
    ])
  end
end
