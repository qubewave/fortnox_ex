# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.InvoicePaymentsResource do
  @moduledoc """
  API calls for all endpoints tagged `InvoicePaymentsResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Bookkeep an invoice payment

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `number` (String.t): identifies the invoice payment
  - `opts` (keyword): Optional parameters
    - `:body` (InvoicePaymentWrap): invoice payment to update

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoicePaymentWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec bookkeep(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoicePaymentWrap.t} | {:error, Tesla.Env.t}
  def bookkeep(connection, number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/invoicepayments/#{number}/bookkeep")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoicePaymentWrap{}}
    ])
  end

  @doc """
  Create an invoice payment

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (InvoicePaymentWrap): invoice payment to create

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoicePaymentWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_invoice_payments_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.InvoicePaymentWrap.t} | {:error, Tesla.Env.t}
  def create_invoice_payments_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/invoicepayments/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoicePaymentWrap{}}
    ])
  end

  @doc """
  Retrieve a single invoice payment

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `number` (String.t): identifies the invoice payment
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoicePaymentWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_invoice_payments_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoicePaymentWrap.t} | {:error, Tesla.Env.t}
  def get_invoice_payments_resource(connection, number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/invoicepayments/#{number}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoicePaymentWrap{}}
    ])
  end

  @doc """
  Retrieve a list of invoice payments

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoicePaymentListItemList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_invoice_payments_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.InvoicePaymentListItemList.t} | {:error, Tesla.Env.t}
  def list_invoice_payments_resource(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/invoicepayments/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoicePaymentListItemList{}}
    ])
  end

  @doc """
  Remove an invoice payment

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `number` (String.t): identifies the invoice payment
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_invoice_payments_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def remove_invoice_payments_resource(connection, number, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/invoicepayments/#{number}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Update an invoice payment

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `number` (String.t): identifies the invoice payment
  - `opts` (keyword): Optional parameters
    - `:body` (InvoicePaymentWrap): invoice payment to update

  ### Returns

  - `{:ok, FortnoxEx.Model.InvoicePaymentWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_invoice_payments_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.InvoicePaymentWrap.t} | {:error, Tesla.Env.t}
  def update_invoice_payments_resource(connection, number, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/invoicepayments/#{number}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.InvoicePaymentWrap{}}
    ])
  end
end
