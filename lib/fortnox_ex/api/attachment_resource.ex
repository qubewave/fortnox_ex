# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.AttachmentResource do
  @moduledoc """
  API calls for all endpoints tagged `AttachmentResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Attach files to one or more entities

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` ([FortnoxEx.Model.Attachment.t]): A list of attachments

  ### Returns

  - `{:ok, [%Attachment{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attach(Tesla.Env.client, keyword()) :: {:ok, list(FortnoxEx.Model.Attachment.t)} | {:error, Tesla.Env.t}
  def attach(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/fileattachments/attachments-v1")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.Attachment{}]}
    ])
  end

  @doc """
  Detach file

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `attachment_id` (String.t): id of the attachment to be detached
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec detach(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def detach(connection, attachment_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/api/fileattachments/attachments-v1/#{attachment_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Get attached files on an entity

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `entityid` ([integer()]): ids of the entities whose attachments should be fetched
  - `entitytype` (String.t): type of the entities whose attachments should be fetched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Attachment{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_attachments(Tesla.Env.client, list(Integer.t), String.t, keyword()) :: {:ok, list(FortnoxEx.Model.Attachment.t)} | {:error, Tesla.Env.t}
  def get_attachments(connection, entityid, entitytype, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/fileattachments/attachments-v1")
      |> add_param(:query, :entityid, entityid)
      |> add_param(:query, :entitytype, entitytype)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.Attachment{}]}
    ])
  end

  @doc """
  List number of attachments

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `entityids` ([integer()]): ids of the entities to look for number of attachments on
  - `entitytype` (String.t): type of the entities  to look for number of attachments on
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%NumberOfAttachments{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_number_of_attachments_for_entity(Tesla.Env.client, list(Integer.t), String.t, keyword()) :: {:ok, list(FortnoxEx.Model.NumberOfAttachments.t)} | {:error, Tesla.Env.t}
  def get_number_of_attachments_for_entity(connection, entityids, entitytype, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/fileattachments/attachments-v1/numberofattachments")
      |> add_param(:query, :entityids, entityids)
      |> add_param(:query, :entitytype, entitytype)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.NumberOfAttachments{}]}
    ])
  end

  @doc """
  Update attachment

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `attachment_id` (String.t): id of the attachment to be updated
  - `opts` (keyword): Optional parameters
    - `:body` (Attachment): an attachment

  ### Returns

  - `{:ok, FortnoxEx.Model.Attachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_attachment(Tesla.Env.client, String.t, keyword()) :: {:ok, FortnoxEx.Model.Attachment.t} | {:error, Tesla.Env.t}
  def update_attachment(connection, attachment_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/api/fileattachments/attachments-v1/#{attachment_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.Attachment{}}
    ])
  end

  @doc """
  Validates a list of attachments that will be included on send

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` ([FortnoxEx.Model.Attachment.t]): a list of Attachments

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec validate_included_on_send(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def validate_included_on_send(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/fileattachments/attachments-v1/validateincludedonsend")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end
end
