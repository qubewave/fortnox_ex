# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.StockTakingResource do
  @moduledoc """
  API calls for all endpoints tagged `StockTakingResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Add rows
  Add rows to a stock taking.  If you add an already existing row noting happens.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `opts` (keyword): Optional parameters
    - `:body` ([FortnoxEx.Model.StockTakingRow.t]): A list of <code>StockTakingRows</code>.

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_stock_taking_rows(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def add_stock_taking_rows(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/warehouse/stocktaking-v1/#{id}/rows")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Add rows by filter
  Add all matching candidate rows to a stock taking, as specified by filters.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `opts` (keyword): Optional parameters
    - `:item_ids` ([String.t]): 
    - `:supplier_numbers` ([String.t]): 
    - `:stock_point_ids` ([String.t]): 
    - `:stock_location_ids` ([String.t]): 
    - `:transaction_date` (Date.t): 
    - `:item_id_search` (String.t): 
    - `:item_description_search` (String.t): 
    - `:exclude_zero_balance_items` (boolean()): 
    - `:exclude_non_inbound_items` (boolean()): 

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_stock_taking_rows_by_filter(Tesla.Env.client, integer(), keyword()) :: {:ok, Integer.t} | {:error, Tesla.Env.t}
  def add_stock_taking_rows_by_filter(connection, id, opts \\ []) do
    optional_params = %{
      :itemIds => :query,
      :supplierNumbers => :query,
      :stockPointIds => :query,
      :stockLocationIds => :query,
      :transactionDate => :query,
      :itemIdSearch => :query,
      :itemDescriptionSearch => :query,
      :excludeZeroBalanceItems => :query,
      :excludeNonInboundItems => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/warehouse/stocktaking-v1/#{id}/addrows")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Create stock taking
  Create a new Stock Taking document.  The only mandatory fields are <code>name</code> and <code>responsible</code>.  <code>state</code> will be set to <code>planning</code> for a newly created document.   The <code>date</code>-field is not mandatory for documents in state <code>planning</code>.  However, when you update the state to <code>started</code> you have to provide a date.   <code>name</code> is a descriptive name of the stock taking.   <code>responsible</code> is the name of the responsible for the stock taking.   <code>rows</code> are added after creation by using the addRows-method.   <code>projectId</code> and <code>costCenterCode</code> are used for book-keeping, when the  Stock Taking document is released.   The field <code>usingStockPoints</code> is set from Warehouse system settings upon creation.  If multiple stockpoints is used, then the rows will be per item-stockPoint-stockLocation.  If multiple stockpoints is NOT used, then the rows will be per item-stockLocation.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (StockTaking): stock taking

  ### Returns

  - `{:ok, FortnoxEx.Model.StockTaking.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_stock_taking_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.StockTaking.t} | {:error, Tesla.Env.t}
  def create_stock_taking_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/warehouse/stocktaking-v1")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.StockTaking{}}
    ])
  end

  @doc """
  Delete Stock Taking document
  Permanently deletes a Stock Taking document and its rows.   Only for documents in state <code>planning</code> and <code>started</code>.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_stock_taking(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_stock_taking(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/api/warehouse/stocktaking-v1/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Delete row
  Remove single row by id from the Stock Taking document.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `row_id` (String.t): row id
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_stock_taking_row(Tesla.Env.client, integer(), String.t, keyword()) :: {:ok, Integer.t} | {:error, Tesla.Env.t}
  def delete_stock_taking_row(connection, id, row_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/api/warehouse/stocktaking-v1/#{id}/rows/#{row_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Delete rows by filter
  Remove all rows matching the filter parameters from the Stock Taking document.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `opts` (keyword): Optional parameters
    - `:item_ids` ([String.t]): 
    - `:supplier_numbers` ([String.t]): 
    - `:stock_point_ids` ([String.t]): 
    - `:stock_location_ids` ([String.t]): 
    - `:transaction_date` (Date.t): 
    - `:item_id_search` (String.t): 
    - `:item_description_search` (String.t): 
    - `:exclude_zero_balance_items` (boolean()): 

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_stock_taking_row_by_filter(Tesla.Env.client, integer(), keyword()) :: {:ok, Integer.t} | {:error, Tesla.Env.t}
  def delete_stock_taking_row_by_filter(connection, id, opts \\ []) do
    optional_params = %{
      :itemIds => :query,
      :supplierNumbers => :query,
      :stockPointIds => :query,
      :stockLocationIds => :query,
      :transactionDate => :query,
      :itemIdSearch => :query,
      :itemDescriptionSearch => :query,
      :excludeZeroBalanceItems => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/api/warehouse/stocktaking-v1/#{id}/rows")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  List stock takings
  <p>      Sortable fields:      <code>id</code>,      <code>name</code>,      <code>date</code>,      <code>responsible</code>,      <code>state</code>  </p>

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:state` (String.t): Include only stock takings with the given state.
    - `:item_id` (String.t): Include only stock takings with the given item.

  ### Returns

  - `{:ok, [%StockTaking{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_all_stock_taking_resource(Tesla.Env.client, keyword()) :: {:ok, list(FortnoxEx.Model.StockTaking.t)} | {:error, Tesla.Env.t}
  def get_all_stock_taking_resource(connection, opts \\ []) do
    optional_params = %{
      :state => :query,
      :itemId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/stocktaking-v1")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.StockTaking{}]}
    ])
  end

  @doc """
  Get candidate rows
  A candidate row is a combination of itemId, stockPointId and stockLocationId  that can be added to the Stock Taking document.   Rows already added to the Stock Taking are excluded from this list.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `opts` (keyword): Optional parameters
    - `:item_ids` ([String.t]): 
    - `:supplier_numbers` ([String.t]): 
    - `:stock_point_ids` ([String.t]): 
    - `:stock_location_ids` ([String.t]): 
    - `:transaction_date` (Date.t): 
    - `:item_id_search` (String.t): 
    - `:item_description_search` (String.t): 
    - `:exclude_zero_balance_items` (boolean()): 
    - `:include_non_inbound_items` (boolean()): Include items that do not exist on inbound deliveries.

  ### Returns

  - `{:ok, [%StockTakingRow{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_candidate_rows(Tesla.Env.client, integer(), keyword()) :: {:ok, list(FortnoxEx.Model.StockTakingRow.t)} | {:error, Tesla.Env.t}
  def get_candidate_rows(connection, id, opts \\ []) do
    optional_params = %{
      :itemIds => :query,
      :supplierNumbers => :query,
      :stockPointIds => :query,
      :stockLocationIds => :query,
      :transactionDate => :query,
      :itemIdSearch => :query,
      :itemDescriptionSearch => :query,
      :excludeZeroBalanceItems => :query,
      :includeNonInboundItems => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/stocktaking-v1/#{id}/candidates")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.StockTakingRow{}]}
    ])
  end

  @doc """
  Get Stock Taking Rows

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `opts` (keyword): Optional parameters
    - `:item_ids` ([String.t]): 
    - `:supplier_numbers` ([String.t]): 
    - `:stock_point_ids` ([String.t]): 
    - `:stock_location_ids` ([String.t]): 
    - `:transaction_date` (Date.t): 
    - `:item_id_search` (String.t): 
    - `:item_description_search` (String.t): 
    - `:exclude_zero_balance_items` (boolean()): 
    - `:secondarysortby` (String.t): Secondary sorting column
    - `:secondaryorder` (String.t): Secondary sorting order
    - `:state_filter` (String.t): 
    - `:starting_row_no` (integer()): the row number to start the search from, used with startingItemId to jump to specific rows, can be empty
    - `:starting_item_id` (String.t): the itemId that should be on top of the rows list (used to jump to specific row), can be empty

  ### Returns

  - `{:ok, [%StockTakingRow{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_rows(Tesla.Env.client, integer(), keyword()) :: {:ok, list(FortnoxEx.Model.StockTakingRow.t)} | {:error, Tesla.Env.t}
  def get_rows(connection, id, opts \\ []) do
    optional_params = %{
      :itemIds => :query,
      :supplierNumbers => :query,
      :stockPointIds => :query,
      :stockLocationIds => :query,
      :transactionDate => :query,
      :itemIdSearch => :query,
      :itemDescriptionSearch => :query,
      :excludeZeroBalanceItems => :query,
      :secondarysortby => :query,
      :secondaryorder => :query,
      :stateFilter => :query,
      :startingRowNo => :query,
      :startingItemId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/stocktaking-v1/#{id}/rows")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.StockTakingRow{}]}
    ])
  end

  @doc """
  Get Stock Taking document

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.StockTaking.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_stock_taking_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, FortnoxEx.Model.StockTaking.t} | {:error, Tesla.Env.t}
  def get_stock_taking_resource(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/stocktaking-v1/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.StockTaking{}}
    ])
  end

  @doc """
  Release Stock Taking document
  The document will be locked and bookkept.  The Stock Taking document state will be set to <code>completed</code>.  The stock amount will be adjusted according to the stock taken quantity.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec release_stock_taking_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def release_stock_taking_resource(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/stocktaking-v1/#{id}/release")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Update a stock taking
  Updates can only be done when state is <code>planning</code> or <code>started</code>.   All updatable fields (<code>date</code>, <code>name</code>, <code>responsible</code>,  <code>state</code>, <code>sortingId</code>, <code>costCenterCode</code>, <code>projectId</code>)  in the document head are set to supplied values.   You cannot set <code>state</code> to <code>completed</code> or <code>voided</code>. Use endpoints  release or void for this.   The <code>date</code>-field is mandatory for documents in state <code>started</code>.   When state is <code>started</code> you use this endpoint for setting the stock taken quantity.  Only existing rows can be updated - no new rows will be created (use the addRows endpoint for this).  Only the supplied rows will be updated. I.e. you don't have to send in <strong>all</strong>  document rows - just supply the rows you want to set stockTakenQuantity for. Just make sure  to always include all the fields from the document head as mentioned above.   The mandatory fields on the (optionally supplied) rows are: <code>itemId</code>,  <code>stockPointId</code>, <code>stockLocationId</code>.  Fields <code>countedBy</code> and <code>stockTakenQuantity</code> are technically  not mandatory, but will be set to null if you don't supply them.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `opts` (keyword): Optional parameters
    - `:body` (StockTaking): stock taking

  ### Returns

  - `{:ok, FortnoxEx.Model.StockTaking.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_stock_taking_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, FortnoxEx.Model.StockTaking.t} | {:error, Tesla.Env.t}
  def update_stock_taking_resource(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/stocktaking-v1/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.StockTaking{}}
    ])
  end

  @doc """
  Void Stock Taking document
  Sets the Stock Taking document state to <code>voided</code>.   Only documents in state <code>planning</code> and <code>started</code>  can be voided. A <code>completed</code> document may not be voided.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Stock Taking document id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec void_stock_taking(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def void_stock_taking(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/stocktaking-v1/#{id}/void")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end
end
