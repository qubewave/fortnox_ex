# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.InboxResource do
  @moduledoc """
  API calls for all endpoints tagged `InboxResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Retrieve a single file

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): identifies the folder
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, binary()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_file_by_id_inbox_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_file_by_id_inbox_resource(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/inbox/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieve the root folder containing files and folders

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.FolderWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_inbox_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.FolderWrap.t} | {:error, Tesla.Env.t}
  def get_inbox_resource(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/inbox/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.FolderWrap{}}
    ])
  end

  @doc """
  Remove a file or folder

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (String.t): identifies the file to remove
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_inbox_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def remove_inbox_resource(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/inbox/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Upload a file
  Upload a file to a specific subdirectory.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:folderId` (String.t): folder id
    - `:path` (String.t): path
    - `:file` (String.t): file

  ### Returns

  - `{:ok, FortnoxEx.Model.FolderFileRowWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec upload(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.FolderFileRowWrap.t} | {:error, Tesla.Env.t}
  def upload(connection, opts \\ []) do
    optional_params = %{
      :folderId => :query,
      :path => :query,
      :file => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/inbox/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.FolderFileRowWrap{}}
    ])
  end
end
