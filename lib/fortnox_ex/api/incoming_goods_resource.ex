# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.IncomingGoodsResource do
  @moduledoc """
  API calls for all endpoints tagged `IncomingGoodsResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Complete Incoming Goods document
  Mark a released Incoming Goods document as Completed.  Bookkeeping will be finalized.  A Completed Incoming Goods document cannot be matched against  any more Supplier Invoices.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Incoming goods document id.
  - `opts` (keyword): Optional parameters
    - `:body` (String.t): Date for bookkeeping in format `\"YYYY-MM-DD\"`. Must be between document's release date (inclusive) and today's date (inclusive).

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec completed(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def completed(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/incominggoods-v1/#{id}/completed")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Create Incoming Goods document

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (IncomingGoods): The <code>IncomingGoods</code> document.

  ### Returns

  - `{:ok, FortnoxEx.Model.IncomingGoods.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_incoming_goods_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.IncomingGoods.t} | {:error, Tesla.Env.t}
  def create_incoming_goods_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/warehouse/incominggoods-v1/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.IncomingGoods{}}
    ])
  end

  @doc """
  List Incoming Goods Documents
  <p>      List incoming goods documents matching the given parameters.  </p>  <p>      Sortable fields:      <code>id</code>,      <code>has_delivery_note</code>,      <code>delivery_note_id</code>,      <code>supplier_number</code>,      <code>date</code>  </p>

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:released` (boolean()): `true` to include only released documents.  `false` to include only non-released documents.
    - `:completed` (boolean()): `true` to include only completed documents.  `false` to include only non-completed documents.
    - `:voided` (boolean()): `true` to include only voided documents.  `false` to include only non-voided documents.
    - `:supplier_number` (String.t): Include only documents with the given `supplierNumber`.
    - `:item_id` (String.t): Include only documents with the given `itemId`.
    - `:note` (String.t): Include only documents where `note`-field contains the given text (case-insensitive).
    - `:delivery_note` (String.t): Include only documents where `deliveryNote`-field contains the given text (case-insensitive).
    - `:q` (String.t): Include only documents where `id` or `deliveryNote`-field contains the given text (case-insensitive).

  ### Returns

  - `{:ok, [%IncomingGoodsListRow{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_all_incoming_goods_resource(Tesla.Env.client, keyword()) :: {:ok, list(FortnoxEx.Model.IncomingGoodsListRow.t)} | {:error, Tesla.Env.t}
  def get_all_incoming_goods_resource(connection, opts \\ []) do
    optional_params = %{
      :released => :query,
      :completed => :query,
      :voided => :query,
      :supplierNumber => :query,
      :itemId => :query,
      :note => :query,
      :deliveryNote => :query,
      :q => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/incominggoods-v1/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%FortnoxEx.Model.IncomingGoodsListRow{}]}
    ])
  end

  @doc """
  Get Incoming Goods document

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Incoming goods document id.
  - `opts` (keyword): Optional parameters
    - `:ignore_supplier_invoice_id` (integer()): This Supplier Invoice id will be excluded when calculating the takenQuantity.

  ### Returns

  - `{:ok, FortnoxEx.Model.IncomingGoods.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_incoming_goods_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, FortnoxEx.Model.IncomingGoods.t} | {:error, Tesla.Env.t}
  def get_incoming_goods_resource(connection, id, opts \\ []) do
    optional_params = %{
      :ignoreSupplierInvoiceId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/warehouse/incominggoods-v1/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.IncomingGoods{}}
    ])
  end

  @doc """
  Release Incoming Goods document
  The document will be locked and bookkept.  The inbound deliveries will affect available stock.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Incoming goods document id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec release_incoming_goods_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def release_incoming_goods_resource(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/incominggoods-v1/#{id}/release")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Update Incoming Goods document

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Incoming goods document id.
  - `opts` (keyword): Optional parameters
    - `:body` (IncomingGoods): The <code>IncomingGoods</code> document.

  ### Returns

  - `{:ok, FortnoxEx.Model.IncomingGoods.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec save_incoming_goods_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, FortnoxEx.Model.IncomingGoods.t} | {:error, Tesla.Env.t}
  def save_incoming_goods_resource(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/incominggoods-v1/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.IncomingGoods{}}
    ])
  end

  @doc """
  Void Incoming Goods document
  Void a document.  If an Incoming Goods document has been Completed, or matched against  Supplier Invoice, it cannot be voided.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): Incoming goods document id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec void_document_incoming_goods_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def void_document_incoming_goods_resource(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/api/warehouse/incominggoods-v1/#{id}/void")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end
end
