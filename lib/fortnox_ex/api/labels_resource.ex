# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule FortnoxEx.Api.LabelsResource do
  @moduledoc """
  API calls for all endpoints tagged `LabelsResource`.
  """

  alias FortnoxEx.Connection
  import FortnoxEx.RequestBuilder

  @doc """
  Create a label
  The created label will be returned if everything succeeded, if there was any problems an error will be returned.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (LabelWrap): to create

  ### Returns

  - `{:ok, FortnoxEx.Model.LabelWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_labels_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.LabelWrap.t} | {:error, Tesla.Env.t}
  def create_labels_resource(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/3/labels")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.LabelWrap{}}
    ])
  end

  @doc """
  Retrieve a list of labels

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, FortnoxEx.Model.LabelList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_labels_resource(Tesla.Env.client, keyword()) :: {:ok, FortnoxEx.Model.LabelList.t} | {:error, Tesla.Env.t}
  def list_labels_resource(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/3/labels")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.LabelList{}}
    ])
  end

  @doc """
  Delete a label
  Deletes the label and its connection to documents permanently.  You need to supply the unique label id that was returned when the label was created or retrieved from the list of labels.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): identifies the label
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_labels_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def remove_labels_resource(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/3/labels/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {:default, false}
    ])
  end

  @doc """
  Update a label
  Updates the specified label with the values provided in the properties. Any property not provided will be left unchanged.

  ### Parameters

  - `connection` (FortnoxEx.Connection): Connection to server
  - `id` (integer()): identifies the label
  - `opts` (keyword): Optional parameters
    - `:body` (LabelWrap): to update

  ### Returns

  - `{:ok, FortnoxEx.Model.LabelWrap.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_labels_resource(Tesla.Env.client, integer(), keyword()) :: {:ok, FortnoxEx.Model.LabelWrap.t} | {:error, Tesla.Env.t}
  def update_labels_resource(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/3/labels/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %FortnoxEx.Model.LabelWrap{}}
    ])
  end
end
